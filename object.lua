---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Skeeto.
--- DateTime: 2019-10-25 5:02 p.m.
---

---
--- The Object class represents any entity within tabletop simulator.
--- Once you have a reference to an object in you're script you can call functions on it directly.
--- Example: ``obj.getPosition(...)``. You can get a reference to an object multiple ways;
---
---@class object
---@class self
object, self = {
    angular_drag = float,
    auto_raise = bool,
    bounciness = float,
    grid_projection = bool,
    guid = string,
    held_by_color = string,
    hide_when_face_down = bool,
    ignore_fog_of_war = bool,
    interactable = bool,
    is_face_down = bool,
    loading_custom = bool,
    mass = float,
    name = string,
    resting = bool,
    script_code = string,
    script_state = string,
    spawning = bool,
    static_friction = float,
    sticky = bool,
    tag = string,
    tooltip = bool,
    use_gravity = bool,
    use_grid = bool,
    use_hands = bool,
    use_rotation_value_flip = bool,
    use_snap_points = bool,
}

---
--- Adds force to an object in a directional Vector.
--- [Tabletop Simulator API](https://api.tabletopsimulator.com/object/#addforce)
---
---@overload fun(vector:table,force_type:int):nil
---@param vector table
---@param force_type number
function object.addForce(table, number) end

---
--- Returns a Table of Vector information describing the size of an object in Global terms.
--- [Bounds](https://docs.unity3d.com/ScriptReference/Bounds.html) are part of Unity, and represent an imaginary square box that can be drawn around an object.
--- Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.
----```
---Example returned Table
---{
---    center = {x=0, y=3, z=0, 0, 3, 0},
---    size = {x=5, y=5, z=5}, 5, 5, 5},
---    offset = {x=0, y=-1, z=0, 0, -1, 0}
---}
---```
--- [Tabletop Simulator API](https://api.tabletopsimulator.com/object/#getbounds)
---
---@overload fun:object
---@return table, table, table
function object.getBounds() end

---
---Returns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}.
--- [Bounds](https://docs.unity3d.com/ScriptReference/Bounds.html) are part of Unity, and represent an imaginary square box that can be drawn around an object.
--- Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.
---```
---Example returned Table
---{
---    center = {x=0, y=3, z=0, 0, 3, 0},
---    size = {x=5, y=5, z=5}, 5, 5, 5},
---    offset = {x=0, y=-1, z=0, 0, -1, 0}
---}
---```
---[Tabletop Simulator API](https://api.tabletopsimulator.com/object/#getboundsnormalized)
---@overload fun:object
---@return table, table, table
function object.getBoundsNormalized() end

---
---Returns a Vector of the current scale.
--- Scale is not an absolute measurement, it is a multiple of the Object's default model size. So {x=2, y=2, z=2} would be a model twice its default size, not 2 units large
--- [Tabletop Simulator API](https://api.tabletopsimulator.com/object/#getscale)
---
---@overload fun:object
---@return table
function object.getScale() end

---
---Returns a Vector of the forward direction of this Object. The direction is relative to how the object is facing.
---```lua
--- Example of moving forward 5 units
---function onLoad()
---    distance = 5
---    pos_target = self.getTransformForward()
---    pos_current = self.getPosition()
---    pos = {
---        x = pos_current.x + pos_target.x * distance,
---        y = pos_current.y + pos_target.y * distance,
---        z = pos_current.z + pos_target.z * distance,
---    }
---    self.setPositionSmooth(pos)
---end
---```
---[Tabletop Simulator API](https://api.tabletopsimulator.com/object/#gettransformforward)
---@overload fun:object
---@return table
function object.getTransformForward() end

---
---Returns a Vector of the right direction of this Object. The direction is relative to how the object is facing.
---```lua
--- Example of moving right 5 units
---function onLoad()
---    distance = 5
---    pos_target = self.getTransformRight()
---    pos_current = self.getPosition()
---    pos = {
---        x = pos_current.x + pos_target.x * distance,
---        y = pos_current.y + pos_target.y * distance,
---        z = pos_current.z + pos_target.z * distance,
---    }
---    self.setPositionSmooth(pos)
---end
---```
---[Tabletop Simulator API](https://api.tabletopsimulator.com/object/#gettransformright)
---@overload fun:object
---@return table
function object.getTransformRight() end


